plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

import org.apache.tools.ant.taskdefs.condition.Os

def get_config(environment_string, default_value) {
    def result =  System.getenv(environment_string) ?: properties.get(environment_string)
    if(!result) {
        if(default_value) {
            result = default_value
        } else {
            project.logger.warn(String.format('"%s" unconfigured, either set in ~/.gradle/gradle.properties or as env', environment_string))
        }
    }
    return result
}

def get_config(environment_string) {
    return get_config(environment_string, null)
}


def get_release_config() {
    def password = get_config('APP_CONFIG_RELEASE_STORE_PASSWORD')
    return {
        storeFile file(get_config('APP_CONFIG_RELEASE_STOREFILE'))
        storePassword password
        keyAlias get_config('APP_CONFIG_RELEASE_STORE_ALIAS', 'key0')
        keyPassword get_config('APP_CONFIG_RELEASE_STORE_KEY_PASSWORD', password)
    }
}

def IsWin() {
    return Os.isFamily(Os.FAMILY_WINDOWS)
}

def local_execute(command, default_value) {
    if (IsWin()) {
        return default_value
        // return commandLine("cmd","/c",command)
    } else {
        return ['sh', '-c', command].execute().text
    }
}

// check git changes
// allow override other versions (between 0-9)
// allows for local tests of versions without messing with CICD auto publish
def gitCommitOffset = 0
def gitCommitsCount = local_execute('git rev-list --all --count', '1').trim().toInteger()
println('gitCommitsCount: ' + gitCommitsCount)
def gitLastTag = local_execute('git tag --sort=-version:refname | head -n 1', 'v0.0.0').trim()
println('gitLastTag: ' + gitLastTag)
def gitCountSinceLastTag = local_execute('git rev-list ' + gitLastTag + '^..HEAD | wc -l', '0').trim().toInteger() - 1
// def dirtyPostfix = ['sh', '-c', 'test -z "$(git diff-index --name-only HEAD --)" || echo "-dirty"'].execute().text.trim()
def dirtyPostfix = local_execute('test -z "$(git diff-index --name-only HEAD --)" || echo "-dirty"', '-dirty').trim()
def gitCommitsCountSinceInfo = gitCountSinceLastTag > 0 ? '-r' + gitCountSinceLastTag : ''

// println versionName + ' : ' + versionCode

println 'deploy version: ' + String.format('%s%s%s', gitLastTag, gitCommitsCountSinceInfo, dirtyPostfix)
println 'version count: ' + (gitCommitsCount * 10 + gitCommitOffset)

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "io.zuercher.dgrocery"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode (gitCommitsCount * 10 + gitCommitOffset)
        versionName String.format('%s%s%s', gitLastTag, gitCommitsCountSinceInfo, dirtyPostfix)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release get_release_config()
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}